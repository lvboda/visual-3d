<template>
	<!-- 最外层容器，控制图形的位置及在整个页面上的布局-->
	<view class="visual">
		<view v-if="isLoading" class="loading-box">
			<view class="loading">
				<span></span>
				<span></span>
				<span></span>
				<span></span>
				<span></span>
				<span></span>
				<span></span>
				<span></span>
			</view>
			页面渲染中...
		</view>
		<!-- 舞台层，设置 preserve-3d 与 perspective 视距  -->
		<view class="stage" @touchmove="onTouchMoveChange">
			<button class="controlCut" @click="onControlCutClick">{{ controlState }}</button>
			<!-- 位面的整体，装入我们要拼接的图片 -->
			<view class="planeWrap" :style="visualAngleStyle">
				<view class="plane x-plus">
				    <x-plus />
				</view>
				<view class="plane x-minus">
					<x-minus />
				</view>
				<view class="plane y-plus">
					<y-plus/>
				</view>
				<view class="plane y-minus">
					<y-minus />
				</view>
				<view class="plane z-plus">
					<z-plus />
				</view>
				<view class="plane z-minus">
					<Test />
					<!-- <z-minus /> -->
				</view>
			</view>
		</view>
	</view>
</template>

<script>
import XPlus from './components/planes/XPlus/XPlus.vue';
import XMinus from './components/planes/XMinus/XMinus.vue';
import YPlus from './components/planes/YPlus/YPlus.vue';
import YMinus from './components/planes/YMinus/YMinus.vue';
import ZPlus from './components/planes/ZPlus/ZPlus.vue';
import ZMinus from './components/planes/ZMinus/ZMinus.vue';
import Test from './components/planes/Test/Test.vue';

export default {
	components: {
		XPlus,
		XMinus,
		YPlus,
		YMinus,
		ZPlus,
		ZMinus,
		Test,
	},
	data() {
	  return {
		isLoading: true,
		coordinates: { x: 0, y: 0, z: 0 },
		controlState: '切换触控',
		touchData: [0, 0],
		visualAngleStyle: 'transform:rotateX(0deg) rotateY(0deg)',
	  };
	},
	watch: {
	  coordinates: {
		deep: true,
		handler(newVal) {
		  const { x, y } = newVal;
		  this.visualAngleStyle = `transform:rotateX(${x}deg) rotateY(${y}deg)`;
		},
	  }
	},
	onShareAppMessage() {
	    return {
	      title: 'visual3D',
	      path: 'pages/visual/index',
	    }
	},
	mounted() {
	  this.onStartGyroscopeChange();
	  setTimeout(() => this.isLoading = false, 3000)
	},
	beforeDestroy() {
	  this.onStopGyroscopeChange();	
	},
	methods: {
	  onControlCutClick() {
	  	if (this.controlState === '切换触控') {
	  		this.controlState = '切换水平仪';
	  		this.onStopGyroscopeChange();
	  	} else {
	  		this.controlState = '切换触控';
	  		this.onStartGyroscopeChange();
	  	}
	  },
	  onTouchMoveChange(event) {
		if (this.controlState === '切换触控') return;
	  	const { pageX, pageY } = event.touches[0];
	  	const [startPageX, startPageY] = this.touchData;
	  	const rateX = 4.5,
	  		rateY = 2;
	  	if (startPageX > pageX) {
	  		this.coordinates.y += rateX;
	  	}
	  	if (startPageX < pageX) {
	  		this.coordinates.y += -rateX;
	  	}
	  	if (startPageY > pageY) {
	  		if (this.coordinates.x > -10) this.coordinates.x += -rateY;
	  	}
	  	if (startPageY < pageY) {
	  		if (this.coordinates.x < 20) this.coordinates.x += rateY;
	  	}
	  	this.touchData = [pageX, pageY];
	  },
	  onStartGyroscopeChange() {
		const isIOSFlag = this.isIOS();

	  	wx.startDeviceMotionListening({
	  		interval: 'ui',
	  		success() {
	  			console.log('开始监听');
	  		},
	  		fail(err) {
	  			console.error(err);
	  		}
	  	});

	  	wx.onDeviceMotionChange(res => {
			let x = res.beta;
			let y = -res.gamma;
			if (!isIOSFlag) {
			  x = -res.beta;
			  y = res.gamma;
			}
			this.coordinates.x = x;
			this.coordinates.y = y;	
	  	});
	  },
	  // 结束陀螺仪监听
	  onStopGyroscopeChange() {
	  	wx.offDeviceMotionChange();
	  	wx.stopDeviceMotionListening();
	  },
	  isIOS() {
		const res = wx.getSystemInfoSync();
		if(res.platform == 'android') return false; //安卓
		return true;
	  },
	},
};
</script>

<style scoped lang="scss">
.visual {
	width: 100vw;
	height: 100vh;
	overflow: hidden;
	.loading-box {
		display: flex;
		align-items: center;
        justify-content: center;
		width: 100vw;
		height: 100vh;
		background-color: #FFFFFF;
		font-size: 20rpx;
		color: #808080;
		z-index: 2;
		.loading {
			transform: scale(0.4);
			width: 100px;
			height: 100px;
			position: relative;
			margin: 0 auto;
		}
	    & span{
				display: inline-block;
				width: 16px;
				height: 16px;
				border-radius: 50%;
				background: #f08080;
				position: absolute;
				-webkit-animation: load 1.04s ease infinite;
			}
			@-webkit-keyframes load{
				0%{
					opacity: 1;
				}
				100%{
					opacity: 0.2;
				}
			}
			& span:nth-child(1){
				left: 0;
				top: 50%;
				margin-top:-8px;
				-webkit-animation-delay:0.13s;
			}
			& span:nth-child(2){
				left: 14px;
				top: 14px;
				-webkit-animation-delay:0.26s;
			}
			& span:nth-child(3){
				left: 50%;
				top: 0;
				margin-left: -8px;
				-webkit-animation-delay:0.39s;
			}
			& span:nth-child(4){
				top: 14px;
				right:14px;
				-webkit-animation-delay:0.52s;
			}
			& span:nth-child(5){
				right: 0;
				top: 50%;
				margin-top:-8px;
				-webkit-animation-delay:0.65s;
			}
			& span:nth-child(6){
				right: 14px;
				bottom:14px;
				-webkit-animation-delay:0.78s;
			}
			& span:nth-child(7){
				bottom: 0;
				left: 50%;
				margin-left: -8px;
				-webkit-animation-delay:0.91s;
			}
			& span:nth-child(8){
				bottom: 14px;
				left: 14px;
				-webkit-animation-delay:1.04s;
			}
	}

	.stage {
		width: 100vw;
		height: 100vh;
		position: relative;
		display: flex;
		justify-content: center;
		align-items: center;
		// 景深视角
		perspective: 600rpx;

		.controlCut {
			position: absolute;
			top: 85%;
			z-index: 1;
			width: 120px;
			height: 50px;
			opacity: .7;
		}

		.planeWrap {
			width: 100vh;
			height: 100vh;
			list-style: none;
			position: relative;
			// 子元素转3D
			transform-style: preserve-3d;
			transition: all 0.1s linear;

			.plane {
				width: 100vh;
				height: 100vh;
				border-radius: 5rpx;
				text-align: center;
				position: absolute;
				/*让所有的子元素都重叠在一起*/
				left: 0;
				right: 0;
			}

			.x-plus {
				transform: translateX(50vh) rotateY(90deg); // 右
				box-shadow: inset 0px 0px 4px 4px #000;
			}

			.x-minus {
				transform: translateX(-50vh) rotateY(-90deg); // 左
				box-shadow: inset 0px 0px 4px 4px #000;
			}

			.y-plus {
				transform: translateY(-50vh) rotateX(90deg); // 上
			}

			.y-minus {
				transform: translateY(50vh) rotateX(-90deg); // 下
			}

			.z-plus {
				transform: translateZ(50vh); // 后
				box-shadow: inset 0px 0px 4px 4px #000;
			}

			.z-minus {
				transform: translateZ(-50vh) rotateY(-180deg); // 前
				box-shadow: inset 0px 0px 4px 4px #000;
			}
			.z-tier1 {
				bottom: 0;
				width: 300rpx;
				height: 300rpx;
				transform: translateZ(0vh); // 后
			}
			.z-tier2 {
				transform: translateZ(30vh); // 后
			}
			.z-tier3 {
				transform: translateZ(-30vh); // 后
			}
		}
	}
}
</style>
